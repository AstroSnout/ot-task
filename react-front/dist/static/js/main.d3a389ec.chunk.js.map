{"version":3,"sources":["components/ContentTableRow.js","components/ContentTable.js","components/ContentTableBalance.js","components/ContentTableERC20.js","components/Loading.js","components/Error.js","App.js","reportWebVitals.js","index.js"],"names":["ContentTableRow","this","props","txhash","from","to","blockNo","value","gasUsed","Component","ContentTable","Table","striped","bordered","hover","data","map","tx","i","hash","sender","receiver","block_number","gas_used","address","ether_balance","timestamp","ContentTableERC20","console","log","token_address","token_balance","Loading","Spinner","animation","role","id","Error","useState","show","setShow","Alert","variant","onClose","dismissible","Heading","errorMsg","App","addressTx","setAddressTx","setBlockNo","addressBal","setAddressBal","dateBal","setDateBal","addressERC20Bal","setAddressERC20Bal","tokenAddress","setTokenAddress","dateERC20Bal","setDateERC20Bal","isError","setIsError","setErrorMsg","isLoaded","setIsLoaded","txData","setTxData","isShowTx","setIsShowTx","balData","setBalData","isShowBal","setIsShowBal","erc20BalData","setERC20BalData","isShowERC20Bal","setIsShowERC20Bal","Container","fluid","Tabs","defaultActiveKey","Tab","eventKey","title","Form","inline","Label","htmlFor","srOnly","Control","className","placeholder","onChange","event","target","FormControl","Button","type","onClick","fetch","then","res","json","result","hasOwnProperty","error","url","getBalance","getERC20Balance","ContentTableBalance","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3a389ec.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\n\r\n\r\nclass ContentTableRow extends Component {\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.txhash}</td>\r\n                <td>{this.props.from}</td>\r\n                <td>{this.props.to}</td>\r\n                <td>{this.props.blockNo}</td>\r\n                <td>{this.props.value * 1/1000000000000000000}</td>\r\n                <td>{this.props.gasUsed}</td>\r\n            </tr>\r\n        )\r\n    };\r\n}\r\n\r\nexport default ContentTableRow;","import React, { useState, useEffect } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ContentTableRow from './ContentTableRow';\r\n\r\nconst ContentTable = (props) => {\r\n  return (\r\n    <Table striped bordered hover>\r\n        <thead>\r\n            <tr>\r\n                <th>Tx Hash</th>\r\n                <th>From</th>\r\n                <th>To</th>\r\n                <th>Timestamp</th>\r\n                <th>Value in ETH</th>\r\n                <th>Gas Used</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {props.data.map((tx, i) => (\r\n                <ContentTableRow key={i}\r\n                    txhash={tx.hash}\r\n                    from={tx.sender}\r\n                    to={tx.receiver}\r\n                    blockNo={tx.block_number}\r\n                    value={tx.value}\r\n                    gasUsed={tx.gas_used}\r\n                />\r\n            ))}\r\n        </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default ContentTable;","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst ContentTable = (props) => {\r\n    return (\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th>Wallet Address</th>\r\n                    <th>Balance in ETH</th>\r\n                    <th>Block Number</th>\r\n                    <th>Timestamp</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>{props.data.address}</td>\r\n                    <td>{props.data.ether_balance}</td>\r\n                    <td>{props.data.block_number}</td>\r\n                    <td>{props.data.timestamp}</td>\r\n                </tr>\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default ContentTable;","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst ContentTableERC20 = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th>Wallet Address</th>\r\n                    <th>Smart Contract Address</th>\r\n                    <th>Balance</th>\r\n                    <th>Block Number</th>\r\n                    <th>Timestamp</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>{props.data.address}</td>\r\n                    <td>{props.data.token_address}</td>\r\n                    <td>{props.data.token_balance}</td>\r\n                    <td>{props.data.block_number}</td>\r\n                    <td>{props.data.timestamp}</td>\r\n                </tr>\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default ContentTableERC20;","import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <Spinner animation=\"border\" role=\"status\" id='loading-spinner'>\r\n        </Spinner>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React, { useState } from 'react';\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\n\r\nconst Error = (props) => {\r\n    const [show, setShow] = useState(true);\r\n    if (show) {\r\n        return (\r\n            <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\r\n                <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\r\n                <p>\r\n                {props.errorMsg}\r\n                </p>\r\n            </Alert>\r\n            // <div>Error: {props.errorMsg}</div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Error;","import React, { useState } from 'react';\n// Bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from 'react-bootstrap/Tab'\n// Local imports\nimport ContentTable from './components/ContentTable';\nimport ContentTableBalance from './components/ContentTableBalance';\nimport ContentTableERC20 from './components/ContentTableERC20';\nimport Loading from './components/Loading';\nimport Error from './components/Error';\n// CSS\nimport './App.css';\n\n\nconst App = () => {\n  // Form Fields\n  const [addressTx, setAddressTx] = useState('');\n  const [blockNo, setBlockNo] = useState('');\n  const [addressBal, setAddressBal] = useState('');\n  const [dateBal, setDateBal] = useState('');\n  const [addressERC20Bal, setAddressERC20Bal] = useState('');\n  const [tokenAddress, setTokenAddress] = useState('')\n  const [dateERC20Bal, setDateERC20Bal] = useState('');\n  // States\n  const [isError, setIsError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('Generic Error');\n  const [isLoaded, setIsLoaded] = useState(true);\n  const [txData, setTxData] = useState([]);\n  const [isShowTx, setIsShowTx] = useState(false);\n  const [balData, setBalData] = useState([]);\n  const [isShowBal, setIsShowBal] = useState(false);\n  const [erc20BalData, setERC20BalData] = useState([]);\n  const [isShowERC20Bal, setIsShowERC20Bal] = useState(false);\n\n  function onClickTx() {\n    getTransactions()\n    setIsShowTx(true)\n    setIsShowBal(false)\n    setIsShowERC20Bal(false)\n  };\n\n  function onClickBal() {\n    getBalance()\n    setIsShowTx(false)\n    setIsShowBal(true)\n    setIsShowERC20Bal(false)\n  }\n\n  function onClickERC20Bal() {\n    getERC20Balance()\n    setIsShowTx(false)\n    setIsShowBal(false)\n    setIsShowERC20Bal(true)\n  }\n\n  function getTransactions() {\n    setIsLoaded(false)\n    setIsError(false)\n    setTxData([])\n    fetch(`http://127.0.0.1:5001/api/get_transactions?address=${addressTx}&blocknumber=${blockNo}`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.hasOwnProperty(\"error\")) { \n            setErrorMsg(result.error); \n            setIsError(true); \n          }\n          else { \n            setIsError(false);\n            setTxData(result) \n          }\n          setIsLoaded(true);\n        },\n        (error) => {\n          console.log(error)\n          setIsLoaded(true);\n          setIsError(true);\n        }\n      )\n  }\n\n  function getBalance() {\n    setIsLoaded(false)\n    setIsError(false);\n    setBalData([])\n    let url = `http://127.0.0.1:5001/api/get_balance?address=${addressBal}`\n    if (dateBal !== '') {\n      url += `&date=${dateBal}`\n    }\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.hasOwnProperty(\"error\")) { \n            setErrorMsg(result.error); \n            setIsError(true); \n          }\n          else { \n            setIsError(false);\n            setBalData(result) \n          }\n          setIsLoaded(true);\n        },\n        (error) => {\n          console.log(error)\n          setIsLoaded(true);\n          setIsError(true);\n        }\n      )\n  }\n\n  function getERC20Balance() {\n    setIsLoaded(false)\n    setIsError(false);\n    setERC20BalData([])\n    let url = `http://127.0.0.1:5001/api/get_erc20_balance?address=${addressERC20Bal}&token=${tokenAddress}`\n    if (dateERC20Bal !== '') {\n      url += `&date=${dateERC20Bal}`\n    }\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.hasOwnProperty(\"error\")) { \n            setErrorMsg(result.error); \n            setIsError(true); \n          }\n          else { \n            setIsError(false);\n            setERC20BalData(result) \n          }\n          setIsLoaded(true);\n        },\n        (error) => {\n          console.log(error)\n          setIsLoaded(true);\n          setIsError(true);\n        }\n      )\n  }\n\n\n  return (\n    <Container fluid id='main'>\n      <Tabs defaultActiveKey=\"get-tx\" id=\"uncontrolled-tab-example\">\n\n        {/* Transactions Tab */}\n        <Tab eventKey=\"get-tx\" title=\"Transactions\">\n          <Form inline>\n            {/* Wallet Address */}\n            <Form.Label htmlFor=\"inlineFormAddress\" srOnly>\n              Wallet Address\n            </Form.Label>\n            <Form.Control\n              className=\"mb-2 mr-sm-2\"\n              id=\"inlineFormAddress\"\n              placeholder=\"Wallet Address\"\n              value={addressTx}\n              onChange={event => setAddressTx(event.target.value)}\n            />\n            {/* Block number */}\n            <Form.Label htmlFor=\"inlineFormBlockNo\" srOnly>\n              Block Number\n            </Form.Label>\n            <FormControl \n              className=\"mb-2 mr-sm-2\"\n              id=\"inlineFormBlockNo\" \n              placeholder=\"Block Number\" \n              value={blockNo}\n              onChange={event => setBlockNo(event.target.value)}\n            />\n            {/* Submit button */}\n            <Button \n              type=\"button\" \n              className=\"mb-2 mr-sm-2\"\n              onClick={onClickTx}\n            >\n              Submit\n            </Button>\n          </Form>\n        </Tab>\n\n        {/* Balance Tab */}\n        <Tab eventKey=\"balance\" title=\"Balance\">\n          <Form inline>\n            {/* Wallet Address */}\n            <Form.Label htmlFor=\"inlineFormAddressBal\" srOnly>\n              Wallet Address\n            </Form.Label>\n            <Form.Control\n              className=\"mb-2 mr-sm-2\"\n              id=\"inlineFormAddressBal\"\n              placeholder=\"Wallet Address\"\n              value={addressBal}\n              onChange={event => setAddressBal(event.target.value)}\n            />\n            {/* Balance for Date */}\n            <Form.Label htmlFor=\"inlineFormDateBal\" srOnly>\n              Date\n            </Form.Label>\n            <FormControl \n              className=\"mb-2 mr-sm-2\"\n              id=\"inlineFormDateBal\" \n              placeholder=\"Date as YYYY-MM-DD\" \n              value={dateBal}\n              onChange={event => setDateBal(event.target.value)}\n            />\n            {/* Submit button */}\n            <Button \n              type=\"button\" \n              className=\"mb-2 mr-sm-2\"\n              onClick={onClickBal}\n            >\n              Submit\n            </Button>\n          </Form>\n        </Tab>\n\n        {/* ERC20 Balance Tab */}\n        <Tab eventKey=\"erc20-balance\" title=\"ERC20 Balance\">\n          <Form inline>\n            {/* Wallet Address */}\n            <Form.Label htmlFor=\"inlineFormAddressERC20Bal\" srOnly>\n              Wallet Address\n            </Form.Label>\n            <Form.Control\n              className=\"mb-2 mr-sm-2\"\n              id=\"inlineFormAddressERC20Bal\"\n              placeholder=\"Wallet Address\"\n              value={addressERC20Bal}\n              onChange={event => setAddressERC20Bal(event.target.value)}\n            />\n            {/* Smart contract Address */}\n            <Form.Label htmlFor=\"inlineFormTokenAddress\" srOnly>\n              Wallet Address\n            </Form.Label>\n            <Form.Control\n              className=\"mb-2 mr-sm-2\"\n              id=\"inlineFormTokenAddress\"\n              placeholder=\"Smart Contract Address\"\n              value={tokenAddress}\n              onChange={event => setTokenAddress(event.target.value)}\n            />\n            {/* Balance for Date */}\n            <Form.Label htmlFor=\"inlineFormDateERC20Bal\" srOnly>\n              Date\n            </Form.Label>\n            <FormControl \n              className=\"mb-2 mr-sm-2\"\n              id=\"inlineFormDateERC20Bal\" \n              placeholder=\"Date as YYYY-MM-DD\" \n              value={dateERC20Bal}\n              onChange={event => setDateERC20Bal(event.target.value)}\n            />\n            {/* Submit button */}\n            <Button \n              type=\"button\" \n              className=\"mb-2 mr-sm-2\"\n              onClick={onClickERC20Bal}\n            >\n              Submit\n            </Button>\n          </Form>\n        </Tab>\n      </Tabs>\n      {\n        isShowTx &&\n        <ContentTable data={txData} />\n      }\n      {\n        isShowBal &&\n        <ContentTableBalance data={balData} />\n      }\n      {\n        isShowERC20Bal &&\n        <ContentTableERC20 data={erc20BalData} />\n      }\n      {\n        !isLoaded &&\n        <div className='center-this square-200'>\n          <Loading className='square-200' />\n        </div>\n      }\n      {\n        isError &&\n        <Error  errorMsg={errorMsg}/>\n      }\n    </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}